name: Full Stack CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'saar-core-banking-services/**/*.cs'
            - 'saar-core-banking-services/**/*.csproj'
            - 'saar-core-banking-services/**/appsettings*.json'
            - 'saar-core-banking-services/Dockerfile*'
          frontend:
            - 'saar-core-banking-services/frontend-ui/**'
          docker:
            - 'saar-core-banking-services/**/Dockerfile*'
            - 'saar-core-banking-services/docker-compose*.yml'
            - 'saar-core-banking-services/.dockerignore'

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore SaaRCoreBankingMicroservices.sln

    - name: Build solution
      run: dotnet build SaaRCoreBankingMicroservices.sln --no-restore --configuration Release

    - name: Run tests
      run: dotnet test SaaRCoreBankingMicroservices.sln --no-build --configuration Release --verbosity normal

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    defaults:
      run:
        working-directory: ./saar-core-banking-services/frontend-ui

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-ui/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Build
      run: npm run build --prod

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: saar-core-banking-services/frontend-ui/package-lock.json

    - name: Build backend
      run: |
        cd saar-core-banking-services
        dotnet restore SaaRCoreBankingMicroservices.sln
        dotnet build SaaRCoreBankingMicroservices.sln --no-restore --configuration Release

    - name: Start backend services
      run: |
        cd saar-core-banking-services/CustomerService
        nohup dotnet run --configuration Release --urls="http://localhost:5200" &
        cd ../AccountService  
        nohup dotnet run --configuration Release --urls="http://localhost:5217" &
        sleep 30

    - name: Build and start frontend
      run: |
        cd saar-core-banking-services/frontend-ui
        npm ci
        npm run build
        nohup npm start &
        sleep 15

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4200; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:5200/api/Customer; do sleep 2; done'

    - name: Run integration tests
      run: |
        cd saar-core-banking-services/frontend-ui
        npm run test -- --watch=false --browsers=ChromeHeadless

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        include:
          - service: frontend-ui
            context: ./saar-core-banking-services/frontend-ui
            dockerfile: ./saar-core-banking-services/frontend-ui/Dockerfile
          - service: AccountService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/AccountService/Dockerfile
          - service: CustomerService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/CustomerService/Dockerfile
          - service: APIGateway
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/APIGateway/Dockerfile

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying full stack to production..."
        # Add your deployment commands here
        # Example: 
        # kubectl apply -f k8s/
        # helm upgrade --install core-banking-system ./helm-chart
