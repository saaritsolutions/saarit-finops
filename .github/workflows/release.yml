name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      run: |
        # Generate changelog since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: releasedb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Backend - Setup .NET
      if: matrix.component == 'backend'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Backend - Restore and build
      if: matrix.component == 'backend'
      run: |
        dotnet restore SaaRCoreBankingMicroservices.sln
        dotnet build SaaRCoreBankingMicroservices.sln --no-restore --configuration Release

    - name: Backend - Run tests
      if: matrix.component == 'backend'
      run: |
        dotnet test SaaRCoreBankingMicroservices.sln --no-build --configuration Release --verbosity normal

    - name: Frontend - Setup Node.js
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend-ui/package-lock.json

    - name: Frontend - Install and test
      if: matrix.component == 'frontend'
      run: |
        cd frontend-ui
        npm ci
        npm run test -- --watch=false --browsers=ChromeHeadless
        npm run build --prod

    - name: Create build artifacts
      run: |
        mkdir -p release-artifacts
        if [ "${{ matrix.component }}" == "backend" ]; then
          # Package backend artifacts
          dotnet publish SaaRCoreBankingMicroservices.sln -c Release -o release-artifacts/backend
          tar -czf backend-${{ needs.create-release.outputs.version }}.tar.gz -C release-artifacts backend
        else
          # Package frontend artifacts
          cd frontend-ui
          npm run build --prod
          tar -czf ../frontend-${{ needs.create-release.outputs.version }}.tar.gz -C dist .
        fi

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.component }}-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: ${{ matrix.component }}-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  build-docker-images:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: frontend-ui
            context: ./frontend-ui
            dockerfile: ./frontend-ui/Dockerfile
          - name: AccountService
            context: .
            dockerfile: ./AccountService/Dockerfile
          - name: CustomerService
            context: .
            dockerfile: ./CustomerService/Dockerfile
          - name: APIGateway
            context: .
            dockerfile: ./APIGateway/Dockerfile
          - name: TransactionService
            context: .
            dockerfile: ./TransactionService/Dockerfile

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Create frontend Dockerfile if needed
      if: matrix.service.name == 'frontend-ui'
      run: |
        cat > frontend-ui/Dockerfile << 'EOF'
        # Multi-stage build for Angular app
        FROM node:18-alpine AS builder
        
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        
        COPY . .
        RUN npm run build --prod
        
        # Production stage
        FROM nginx:alpine
        
        # Copy custom nginx config
        COPY nginx.conf /etc/nginx/nginx.conf
        
        # Copy built app
        COPY --from=builder /app/dist/material-pro-angular-lite /usr/share/nginx/html
        
        EXPOSE 80
        
        CMD ["nginx", "-g", "daemon off;"]
        EOF

        cat > frontend-ui/nginx.conf << 'EOF'
        events {
          worker_connections 1024;
        }
        
        http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          server {
            listen 80;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
            
            location / {
              try_files $uri $uri/ /index.html;
            }
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
            
            # Gzip compression
            gzip on;
            gzip_vary on;
            gzip_min_length 1024;
            gzip_types text/plain text/css text/xml text/javascript application/javascript;
          }
        }
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-docker-images]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying release ${{ needs.create-release.outputs.version }} to production..."
        echo "Docker images have been built and pushed with tags:"
        echo "- ${{ env.REGISTRY }}/${{ github.repository_owner }}/frontend-ui:${{ needs.create-release.outputs.version }}"
        echo "- ${{ env.REGISTRY }}/${{ github.repository_owner }}/AccountService:${{ needs.create-release.outputs.version }}"
        echo "- ${{ env.REGISTRY }}/${{ github.repository_owner }}/CustomerService:${{ needs.create-release.outputs.version }}"
        
        # Add your production deployment commands here
        # Examples:
        # kubectl set image deployment/frontend-ui frontend-ui=${{ env.REGISTRY }}/${{ github.repository_owner }}/frontend-ui:${{ needs.create-release.outputs.version }}
        # helm upgrade --install core-banking-system ./helm-chart --set image.tag=${{ needs.create-release.outputs.version }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()
    
    steps:
    - name: Notify teams
      run: |
        echo "Release ${{ needs.create-release.outputs.version }} has been completed!"
        echo "Status:"
        echo "- Create Release: ${{ needs.create-release.result }}"
        echo "- Deploy Production: ${{ needs.deploy-production.result }}"
        
        # Add notification logic here (Slack, Teams, Email, etc.)
        # Example:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Core Banking System ${{ needs.create-release.outputs.version }} has been released!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
