name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend-ui/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend-ui/**'
      - '.github/workflows/frontend-ci.yml'

env:
  NODE_VERSION: '18.x'
  WORKING_DIRECTORY: './frontend-ui'

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint --if-present

    - name: Run unit tests
      run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.WORKING_DIRECTORY }}/coverage/lcov.info
        flags: frontend
        fail_ci_if_error: false

    - name: Build application
      run: npm run build --prod

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ${{ env.WORKING_DIRECTORY }}/dist/
        retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Start backend services
      run: |
        cd ../CustomerService
        dotnet build
        nohup dotnet run --urls="http://localhost:5200" &
        cd ../AccountService  
        dotnet build
        nohup dotnet run --urls="http://localhost:5217" &
        sleep 30

    - name: Start frontend server
      run: |
        nohup npm start &
        sleep 15

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4200; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:5200/api/Customer; do sleep 2; done'

    - name: Run E2E tests
      run: npm run e2e --if-present || npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: ${{ env.WORKING_DIRECTORY }}/cypress/videos/
        retention-days: 7

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build --prod

    - name: Deploy to Staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging..."
        # Add your staging deployment commands here
        # Example: npm run deploy:staging

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production..."
        # Add your production deployment commands here
        # Example: npm run deploy:prod

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=critical

    - name: Run npm audit fix
      run: npm audit fix --dry-run

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/frontend-ui
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Dockerfile for frontend
      run: |
        cat > frontend-ui/Dockerfile << 'EOF'
        # Multi-stage build for Angular app
        FROM node:18-alpine AS builder
        
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        
        COPY . .
        RUN npm run build --prod
        
        # Production stage
        FROM nginx:alpine
        
        # Copy custom nginx config
        COPY nginx.conf /etc/nginx/nginx.conf
        
        # Copy built app
        COPY --from=builder /app/dist/material-pro-angular-lite /usr/share/nginx/html
        
        EXPOSE 80
        
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: Create nginx config
      run: |
        cat > frontend-ui/nginx.conf << 'EOF'
        events {
          worker_connections 1024;
        }
        
        http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          server {
            listen 80;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
            
            # Angular routing support
            location / {
              try_files $uri $uri/ /index.html;
            }
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
            
            # Gzip compression
            gzip on;
            gzip_vary on;
            gzip_min_length 1024;
            gzip_proxied expired no-cache no-store private must-revalidate auth;
            gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript;
          }
        }
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-ui
        file: ./frontend-ui/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
