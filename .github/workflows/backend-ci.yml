name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'saar-core-banking-services/**/*.cs'
      - 'saar-core-banking-services/**/*.csproj'
      - 'saar-core-banking-services/**/appsettings*.json'
      - 'saar-core-banking-services/**/Dockerfile'
  pull_request:
    branches: [ main ]
    paths: 
      - 'saar-core-banking-services/**/*.cs'
      - 'saar-core-banking-services/**/*.csproj'
      - 'saar-core-banking-services/**/appsettings*.json'
      - 'saar-core-banking-services/**/Dockerfile'

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  SOLUTION_FILE: saar-core-banking-services/SaaRCoreBankingMicroservices.sln
  REGISTRY: ghcr.io
  NAMESPACE: saaritsolutions

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: |
        cd saar-core-banking-services
        dotnet restore SaaRCoreBankingMicroservices.sln

    - name: Build solution
      run: |
        cd saar-core-banking-services
        dotnet build SaaRCoreBankingMicroservices.sln --no-restore --configuration Release

    - name: Run tests
      run: |
        cd saar-core-banking-services
        dotnet test SaaRCoreBankingMicroservices.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: saar-core-banking-services/**/TestResults/**/*.xml
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: |
        cd saar-core-banking-services
        dotnet restore SaaRCoreBankingMicroservices.sln

    - name: Run security scan
      uses: security-code-scan/security-code-scan-action@v1
      with:
        project-path: saar-core-banking-services/SaaRCoreBankingMicroservices.sln

  build-and-push:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - service: AccountService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/AccountService/Dockerfile
          - service: LoanService  
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/LoanService/Dockerfile
          - service: APIGateway
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/APIGateway/Dockerfile
          - service: GLAccountingService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/GLAccountingService/Dockerfile
          - service: DocumentManagementService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/DocumentManagementService/Dockerfile
          - service: UserAccessManagementService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/UserAccessManagementService/Dockerfile
          - service: NotificationService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/NotificationService/Dockerfile
          - service: ReportingMISService
            context: ./saar-core-banking-services
            dockerfile: ./saar-core-banking-services/ReportingMISService/Dockerfile

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically involve updating Kubernetes manifests or Docker Compose files"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "This would typically involve updating production Kubernetes cluster"
